set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
?kernlab
library(swirl)
swirl()
library(swirl)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char , "Pratik Gujral")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
InF - Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[30000]
x[3000]
x[c(-2,-10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c('Bill', 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<-10
10<=10
5 != 7
! (5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE,
| FALSE)
TRUE && c(TRUE, FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
x
}
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram()
submit()
mad_libs("Pratik", "Place1", "Good")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<- as.Date(1970-01-01)
d2<- as.Date("1970-01-01")
d2<- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units= 'days')
update.packages()
?gl
install.packages("xlsx")
library(xlsx)
?xmlValue
library(XML)
?xmlValue
library(XML)
fileUrl <- "http://www.w3schoools.com/XML/simple.xml"
rm(list=ls())
library(XML)
fileUrl <- "http://www.w3schoools.com/XML/simple.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
fileUrl <- "http://www.w3schoool.com/XML/simple.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
fileUrl <- "http://www.w3schoools.com/xml/simple.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
## Extract parts of file
xmlSApply(X = rootNode, FUN = xmlValue)
## To get specific component
xpathSApply(rootNode, "//name", fun = xmlValue)
xpathSApply(rootNode, "//price", fun = xmlValue)
## Extract content by attribute
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore_ravens"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc
scores <- xpathSApply(doc, "//li[@class=score]", xmlValue)
scores
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
teams
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
## Extract parts of file
xmlSApply(X = rootNode, FUN = xmlValue)
## To get specific component
xpathSApply(rootNode, "//name", fun = xmlValue)
xpathSApply(rootNode, "//price", fun = xmlValue)
## Extract content by attribute
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore_ravens"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc
scores <- xpathSApply(doc, "//li[@class=score]", xmlValue)
scores
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
teams
swirl()
library(httr)
pg1<- GET("http://facebook.com/patikgujral");
pg1
pg2<- GET("http://graph.facebook.com/patikgujral", authenticate("pratikgujral@gmail.com","Pratik@1994"))
pg2
pg1<- GET("http://graph.facebook.com/patikgujral");
pg1
my_app <- oauth_app(appname = "pratikgujralTest", key = "t5zP4kCHsQy6MpIBdeFD415rO", secret =
"4tsdQUvOnLfP4gpPfnUw7dPrv6sbz3s1YzPrMq8zr1We9vFBD3")
# Creating signature
sig = sign_oauth1.0(my_app, token = "135836835-Es8h3giKSBki8PIuMqfdRhbXxI83VaJAX4gjNmRO",
token_secret = "jukws9TbqZ4vYTZzzLrQoZjkN4bFJQbhHE1hSOWPrnE1y")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
sig = sign_oauth1.0(my_app, token = "135836835-Es8h3giKSBki8PIuMqfdRhbXxI83VaJAX4gjNmRO",
token_secret = "jukws9TbqZ4vYTZzzLrQoZjkN4bFJQbhHE1hSOWPrnE1y")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
install.packages("base64enc")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
library(rjson)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json1
class(json1)
library(jsonlite)
detach(rjson)
detach("rjson")
detach(package:rjson, unload = TRUE)
library(jsonlite)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
data <- rnorm(1e5)
object.size(data)
print(object.size(data), units = "Mb")
rm(list=ls())
paste(intToUtf8(acos(log(1))*180/pi-17),
intToUtf8(atan(1/sqrt(3))*180/pi+2), toupper(substr(month.name[4],5,5)),
intToUtf8(acos(exp(0)/2)*180/pi+2^4+3),toupper(substr(month.name[11],3,3)),
LETTERS[3^2-2^2],intToUtf8(atan(1/sqrt(3))*180/pi+2),
toupper(substr(weekdays(exp(0), FALSE),6,6)), substr(month.name[10],1,1),
intToUtf8(acos(log(1))*180/pi-5), sep = intToUtf8(0))
library(timeDate)
library(time)
library(Posixct)
?"POSIXct"
paste(intToUtf8(acos(log(1))*180/pi-17),
intToUtf8(atan(1/sqrt(3))*180/pi+2), toupper(substr(month.name[4],5,5)),
intToUtf8(acos(exp(0)/2)*180/pi+2^4+3),toupper(substr(month.name[11],3,3)),
LETTERS[3^2-2^2],intToUtf8(atan(1/sqrt(3))*180/pi+2),
toupper(substr(weekdays(exp(0), FALSE),6,6)), substr(month.name[10],1,1),
intToUtf8(acos(log(1))*180/pi-5), sep = intToUtf8(0))
paste(intToUtf8(acos(log(1))*180/pi-17),
intToUtf8(atan(1/sqrt(3))*180/pi+2), toupper(substr(month.name[4],5,5)),
intToUtf8(acos(exp(0)/2)*180/pi+2^4+3),toupper(substr(month.name[11],3,3)),
LETTERS[3^2-2^2],intToUtf8(atan(1/sqrt(3))*180/pi+2),
toupper(substr(weekdays(exp(0), FALSE),6,6)), substr(month.name[10],1,1),
intToUtf8(acos(log(1))*180/pi-5), sep = intToUtf8(0))
?weekdays
paste(intToUtf8(acos(log(1))*180/pi-17),
intToUtf8(atan(1/sqrt(3))*180/pi+2), toupper(substr(month.name[4],5,5)),
intToUtf8(acos(exp(0)/2)*180/pi+2^4+3),toupper(substr(month.name[11],3,3)),
LETTERS[3^2-2^2],intToUtf8(atan(1/sqrt(3))*180/pi+2),
toupper(substr(weekdays(exp(0), FALSE),6,6)), substr(month.name[10],1,1),
intToUtf8(acos(log(1))*180/pi-5), sep = intToUtf8(0))
paste(intToUtf8(acos(log(1))*180/pi-17),
intToUtf8(atan(1/sqrt(3))*180/pi+2), toupper(substr(month.name[4],5,5)),
intToUtf8(acos(exp(0)/2)*180/pi+2^4+3),toupper(substr(month.name[11],3,3)),
LETTERS[3^2-2^2],intToUtf8(atan(1/sqrt(3))*180/pi+2),
substr(month.name[10],1,1),
intToUtf8(acos(log(1))*180/pi-5), sep = intToUtf8(0))
install.packages("jpeg")
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(car$speed), max(car$dist) "SWIRL rules!")
text(mean(car$speed), max(car$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income, data=state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airq)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab='Month', ylab="Ozone (ppb)", col.axis='blue', col.lab='red')
title('Ozone and Wind in New York City')
with(airquality, plot(Wind,Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par('lty')
plot(airquality$Wind, airquality$Ozone, type='n')
title('Wind and Ozone in NYC')
,may <- subset(airquality, months==5)
,may <- subset(airquality, months=='5')
may <- subset(airquality, months=='5')
may <- subset(airquality, months==5
)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col='blue', pch=2)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col='red', pch=1)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend('topright', c(17,8), c("blue", "red"), c("May','Other Months'))
legend('topright', c(17,8), c("blue", "red"), c("May",'Other Months'))
legend('topright', pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty=2, lwd = 2)
par(mfrow=c(1,2))
plot(airquality$wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$wind, airquality$Ozone, main("Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main("Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=T)
mtext("Ozone and Weather in New York City", outer=TRUE)
exit(0)
library(lattice)
View(state.x77)
state <- data.frame(state.x77, region = state.region)
View(state)
View(stete.region)
View(state.region)
class(stste.region)
class(state.region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income & region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
library(ggplot2)
data(mpg)
View(mpg)
qplot
qplot(displ, hwy, data = mpg)
help(tabulate)
help9which.max)
help(which.max)
setwd('D:\\R\\R')
getwd()
table <- data.frame(foo = 1:6, bar = c(T,F,F))
View(table)
cat("\nNumber of rows: ", nrow(table))
cat("\nNumber of columns: ", ncol(table))
x <- 1:5
print(x)
names(x)
# All R objects can have names
x <- 1:5
print(x)
names(x)
names(x) <- c('one','two','three')
names(x)
names(x) <- c('one','two','three','four','five')
print(x)
x <- 1:5
print(x)
names(x)
names(x) <- c('one','two','three')
print(x)
names(x)
names(x) <- c('one','two','three','four','five')
print(x)
x
x$three
x['three']
x['three','five'] #error
x[c('four','one','three')]
x[!'one']
x[T]
xc([T,F)]
x[c(T,F)]
x <- matrix(c(1,2,3,NA, NA, 6, NA, 7, 8), nrow = 2)
x <- matrix(c(1,2,3,NA, NA, 6, NA, 8), nrow = 2)
x
x[2,3]
x[2]
x[2,]
x[7]
x[8]
x[2,]
x[,2]
is.na(x)
class(x[,3])
class(x[,3])
x[1,2, drop=FALSE]
x[1,2]
x[1,2, drop=FALSE]
x[1,2, drop=TRUE]
x[1,2, drop=TRUE] # Vector is returned
x[1,]
x[1, ,drop=TRUE]
x[1,]
class(x[1,])
class(x[1, ,drop=TRUE])
class(x[1, ,drop=FALSE])
help(rep)
x <- matrix(1:4,2,2)
y <- matrix(rep(10,4),nrow = 2, ncol = 2)
x
y
x * y # Element by element multiplication
x %*% y #Matrix multiplication
